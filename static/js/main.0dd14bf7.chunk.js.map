{"version":3,"sources":["useChart.js","App.js","reportWebVitals.js","index.js"],"names":["useChart","nodeRef","options","React","useEffect","current","chart","Chart","getChart","id","destroy","console","log","App","canvasRef","useRef","useState","data","setData","fetch","then","response","json","hourlyData","forecast","forecastday","hour","values","map","temp","temp_c","label","time","split","type","labels","datasets","backgroundColor","borderColor","borderWidth","legend","display","fontColor","scales","yAxes","ticks","beginAtZero","className","ref","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAqBeA,EAlBE,SAACC,EAASC,GAezB,OAdAC,IAAMC,WAAU,WACd,GAAIH,GAAWA,EAAQI,QAAS,CAC9B,IAAMC,EAAQC,IAAMC,SAASP,EAAQI,QAAQI,IACzCH,GACFA,EAAMI,UAER,IAAIH,IAAMN,EAAQI,QAASH,QAE3B,IAAIK,IAAMN,EAAQI,QAASH,GAG7BS,QAAQC,IAAI,YACX,CAACX,EAASC,IAEN,I,OC6CMW,MA3Df,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAmDb,OA/CAd,qBAAU,WACRe,MACE,sHAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACH,GACL,IAAMM,EAAaN,EAAKO,SAASC,YAAY,GAAGC,KAChDR,EAAQ,CACNS,OAAQJ,EAAWK,KAAI,SAACC,GAAD,OAAUA,EAAKC,UACtCC,MAAOR,EAAWK,KAAI,SAACC,GAAD,OAAUA,EAAKG,KAAKC,MAAM,KAAK,aAI1D,IACHjC,EAASc,EAAW,CAClBoB,KAAM,OACNjB,KAAM,CACJkB,OAAQlB,EAAKc,MACbK,SAAU,CACR,CACEL,MAAO,oBACPd,KAAMA,EAAKU,OACXU,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,KAInBrC,QAAS,CACPsC,OAAQ,CACNC,SAAS,EACTN,OAAQ,CACNO,UAAW,YAGfC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,SASvB,sBAAKC,UAAU,MAAf,UACE,6EACA,wBAAQtC,GAAG,eAAeuC,IAAKlC,EAAWmC,MAAM,MAAMC,OAAO,YC9CpDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0dd14bf7.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"chart.js/auto\";\n\nconst useChart = (nodeRef, options) => {\n  React.useEffect(() => {\n    if (nodeRef && nodeRef.current) {\n      const chart = Chart.getChart(nodeRef.current.id);\n      if (chart) {\n        chart.destroy();\n      }\n      new Chart(nodeRef.current, options);\n    } else {\n      new Chart(nodeRef.current, options);\n    }\n\n    console.log(\"render\");\n  }, [nodeRef, options]);\n\n  return {};\n};\n\nexport default useChart;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport useChart from \"./useChart\";\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\n      \"http://api.weatherapi.com/v1/forecast.json?key=431d9c8a588a44468ec64119211708&q=Coimbatore&days=1&aqi=no&alerts=no\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const hourlyData = data.forecast.forecastday[0].hour;\n        setData({\n          values: hourlyData.map((temp) => temp.temp_c),\n          label: hourlyData.map((temp) => temp.time.split(\" \")[1]),\n        });\n        //setLabel(hourlyData.map((temp) => temp.time));\n      });\n  }, []);\n  useChart(canvasRef, {\n    type: \"line\",\n    data: {\n      labels: data.label,\n      datasets: [\n        {\n          label: \"Temperature Â°C\",\n          data: data.values,\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      legend: {\n        display: true,\n        labels: {\n          fontColor: \"#ff0000\",\n        },\n      },\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n            },\n          },\n        ],\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Coimbatore Weather Forecast Data For Today </h1>\n      <canvas id=\"weatherChart\" ref={canvasRef} width=\"400\" height=\"100\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}